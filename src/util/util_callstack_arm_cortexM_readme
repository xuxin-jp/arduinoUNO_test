arm cortex-m call stack
┌───────────────────┐ ← SP (MSP)
│ R0  (param1)     │
├───────────────────┤
│ R1  (param2)     │
├───────────────────┤
│ R2  (param3)     │
├───────────────────┤
│ R3  (param4)     │
├───────────────────┤
│ R12              │
├───────────────────┤
│ LR/R14           │
├───────────────────┤
│ PC  (return addr)│
├───────────────────┤
│ xPSR             │
└───────────────────┘
************************start**************main -> func1 -> func2 -> func3***************************************************************
-----------------------------------------------step1---main-----------------------------------------------

┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 这是函数返回时的PC，指向调用后的位置
└───────────────────┘

-----------------------------------------------step2---main -> func1-----------------------------------------------
b func1：将 main 的返回地址（即 PC）入栈,（PC）= func1 ()
LR入栈，函数参数和寄存器（如 R4-R7）入栈。
┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │ ← 保存 main 的返回地址
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 保存 main 的返回地址（即跳转到 func1 之后的指令位置）
└───────────────────┘
-----------------------------------------------step3---main -> func1 -> func2-----------------------------------------------
b func2： 当前PC,即 func1 的返回地址压栈。指令跳转到 func2
LR 寄存器保存 func1 的返回地址，然后将 func2 的参数、局部变量和寄存器压入栈中。
┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │ ← 保存 func1 的返回地址
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 保存 func1 的返回地址（即跳转到 func2 之后的指令位置）
└───────────────────┘
-----------------------------------------------step4---main -> func1 -> func2-> func3----------------------------------------------
b func3 ： 指令跳转到 func3，并将 func2 的返回地址压栈。栈继续增长。
LR 寄存器保存 func2 的返回地址，并将 func3 的参数、局部变量和寄存器压入栈中。
┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │ ← 保存 func2 的返回地址
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 保存 func2 的返回地址（即跳转到 func3 之后的指令位置）
└───────────────────┘
-----------------------------------------------step5---main -> func1 -> func2 <-func3------------------------------
bx lr 跳转回 func2，并恢复 func2 的栈信息。
SP 回退，恢复 func2 的栈信息，返回到 func2。
┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │ ← 恢复 func2 的返回地址
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 恢复 func2 的返回地址（即跳转到 func3 之后的指令位置）
└───────────────────┘
-----------------------------------------------step6---main -> func1 <- func2 ------------------------------
bx lr 跳转回 func1，并恢复 func1 的栈信息。
SP 回退，恢复 func1 的栈信息，返回到 func1。
┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │ ← 恢复 func1 的返回地址
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 恢复 func1 的返回地址（即跳转到 func2 之后的指令位置）
└───────────────────┘
-----------------------------------------------step7---main  <- func1 ------------------------------
bx lr 跳转回 main，并恢复 main 的栈信息。
┌───────────────────┐ ← SP (PSP)
│ local param1s    │
├───────────────────┤
│ R4               │
├───────────────────┤
│ R5               │
├───────────────────┤
│ R6               │
├───────────────────┤
│ R7               │
├───────────────────┤
│ LR (R14)         │
├───────────────────┤
│ (R0-R3)          │
├───────────────────┤
│ PC (返回地址)    │ ← 返回 main 的位置
└───────────────────┘
************************end**************main -> func1 -> func2 -> func3***************************************************************
┌───────────────────┐ ← SP (PSP)
│ local param1s    │ ← func3 的局部参数
├───────────────────┤
│ R4               │ ← func3 的寄存器 R4
├───────────────────┤
│ R5               │ ← func3 的寄存器 R5
├───────────────────┤
│ R6               │ ← func3 的寄存器 R6
├───────────────────┤
│ R7               │ ← func3 的寄存器 R7
├───────────────────┤
│ LR (R14)         │ ← func3 的返回地址（即 func2 的返回地址）
├───────────────────┤
│ (R0-R3)          │ ← func3 的传入参数（如果有）
├───────────────────┤
│ PC (返回地址)    │ ← 保存 func2 的返回地址（即跳转到 func3 之后的指令位置）
├───────────────────┤
│ ---------------- │
│ LR (R14)         │ ← func2 的返回地址（即 func1 的返回地址）
├───────────────────┤
│ local param1s    │ ← func2 的局部参数
├───────────────────┤
│ R4               │ ← func2 的寄存器 R4
├───────────────────┤
│ R5               │ ← func2 的寄存器 R5
├───────────────────┤
│ R6               │ ← func2 的寄存器 R6
├───────────────────┤
│ R7               │ ← func2 的寄存器 R7
├───────────────────┤
│ ---------------- │
│ LR (R14)         │ ← func1 的返回地址（即 main 的返回地址）
├───────────────────┤
│ local param1s    │ ← func1 的局部参数
├───────────────────┤
│ R4               │ ← func1 的寄存器 R4
├───────────────────┤
│ R5               │ ← func1 的寄存器 R5
├───────────────────┤
│ R6               │ ← func1 的寄存器 R6
├───────────────────┤
│ R7               │ ← func1 的寄存器 R7
├───────────────────┤
│ ---------------- │
│ LR (R14)         │ ← main 的返回地址
├───────────────────┤
│ local param1s    │ ← main 的局部参数
├───────────────────┤
│ R4               │ ← main 的寄存器 R4
├───────────────────┤
│ R5               │ ← main 的寄存器 R5
├───────────────────┤
│ R6               │ ← main 的寄存器 R6
├───────────────────┤
│ R7               │ ← main 的寄存器 R7
└───────────────────┘
